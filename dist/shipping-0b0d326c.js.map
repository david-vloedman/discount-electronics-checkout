{"version":3,"sources":["webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/address/AddressFormModal.tsx","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["AccordionContext","onToggle","state","getContextValue","selectedItemId","handleToggleItem","id","props","isDisabled","onSelect","setState","render","this","children","className","defaultSelectedItemId","Provider","value","ChecklistContext","undefined","connectFormik","setFieldValue","name","handleSelect","contextValue","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","data","language","onClick","testId","translatedString","translate","parsedString","length","href","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","node","done","addEventListener","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","type","Label","htmlFor","content","htmlId","label","rest","Checklist","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","SaveAddressForm","withLanguage","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","isLoading","onRequestClose","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","isPickupOnly","preventDefault","TranslatedString","Button","variant","Primary","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","cart","lineItems","physicalItems","result","item","i","addedByPromotion","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","address","handleSelectAddress","alt","src","map","optionName","nameId","AddressSelect","selectedAddress","shippingAddress","withCheckout","context","order","getOrder","onDatePicked","hasGiftOption","toggleGiftOption","setShipByDate","isDate","heading","shipByDate","giftCheckboxRef","orderCommentsRef","giftLabel","limitComment","renderLabel","hidden","TextInput","maxLength","placeholder","ref","legend","Legend","Fieldset","FormField","input","ShippingOptionListItem","consignmentId","shippingOption","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","isMessengerDelivery","isShippingOnly","listComponent","description","checkForShipping","items","querySelectorAll","classList","add","remove","forEach","textContent","radioId","splitId","selectedShippingOption","selectShippingOption","selectDefaultShippingOptions","getConsignments","find","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","componentDidUpdate","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","shippingOptionIds","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","sortConsignments","unsortedConsignments","shippableItems","consignmentsOrder","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","checkoutSettings","selectConsignmentShippingOption","isDatePicked","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","hasShipByDate","customerMessage","shippingMethodsComponent","Alert","Error","ShippingOptions","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItemIds","filter","includes","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","labelContent","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","DynamicFormField","parentFieldName","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","Tiny","Secondary","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","initializeShipping","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","onMultiShippingChange","shouldShowMultiShipping","handleDatePicked","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","console","log","parsedCustomerMessage","replace","orderCommentAddendum","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"4GAAA,mBAQMA,EAAmB,wBAAqC,CAAEC,SAAU,SAE3D,O,qICQf,uE,OACI,EAAAC,MAAwB,GAEhB,EAAAC,gBAAkB,sBAAW,SAAAC,GACjC,MAAO,CACHH,SAAU,EAAKI,iBACfD,eAAc,MAsBd,EAAAC,iBAAyC,SAAAC,GACvC,MAAkC,EAAKC,MAArCC,EAAU,aAAE,IAAAC,gBAAQ,IAAG,SAAI,EAE/BD,IAIJ,EAAKE,SAAS,CAAEN,eAAgBE,IAChCG,EAASH,K,EAEjB,OAtCuC,yBAUnC,YAAAK,OAAA,WACU,MAIFC,KAAKL,MAHLM,EAAQ,WACR,IAAAC,iBAAS,IAAG,cAAW,EACvBC,EAAqB,wBAGjB,EAA2CH,KAAKV,MAAK,eAArDE,OAAc,IAAG,EAAAW,EAAqB,EAE9C,OACI,kBAACf,EAAA,EAAiBgB,SAAQ,CAACC,MAAQL,KAAKT,gBAAgBC,IACpD,wBAAIU,UAAYA,GACVD,KAgBtB,EAtCA,CAAuC,aCA1BK,EAAmB,6BAAiDC,GAiClE,WAAAC,EAAA,GAAc,gBA5BzB,SAAC,GACS,IAAAC,EAAa,uBACvBC,EAAI,OACJ,IAAAb,gBAAQ,IAAG,SAAI,EACZF,EAAK,mBAJP,8BAMKgB,EAAe,uBAAY,SAACN,GAC9BI,EAAcC,EAAML,GACpBR,EAASQ,KACV,CACCK,EACAb,EACAY,IAGEG,EAAe,mBAAQ,WAAM,OAAGF,KAAI,KAAK,CAACA,IAEhD,OACI,kBAACJ,EAAiBF,SAAQ,CAACC,MAAQO,GAC/B,kBAAC,EAAS,sBACDjB,EAAK,CACVO,UAAU,kDACVL,SAAWc,W,kCC7CZ,SAASE,EAAYC,GAChC,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAYJ,EAEhB,IAAMK,EAASJ,EAAIK,cAAc,KAEjC,IAAKD,EACD,MAAO,GAGX,IAAME,EAAiBN,EAAIG,UAAUI,MAAMH,EAAOI,WAElD,MAAO,CAAEF,EAAe,GAAIF,EAAOL,KAAMO,EAAe,IAZ5D,mC,kCCAA,iDAsCe,iBAzBoE,SAAC,G,IAChFG,EAAI,OACJ9B,EAAE,KACF+B,EAAQ,WACRC,EAAO,UACPC,EAAM,SAEAC,EAAmBH,EAASI,UAAUnC,EAAI8B,GAC1CM,EAAe,YAAYF,GAEjC,OAAOE,EAAaC,OAChB,oCACMD,EAAa,GACf,mCACgBH,EACZK,KAAK,IACLN,QAAU,YAAeA,IAEvBI,EAAa,IAEjBA,EAAa,IAEnB,oCAAIF,O,0HC7BG,SAASpB,EAIpByB,GAEA,IAAMC,EAA4C,gBAC9C,SAAAvC,GAAS,yBAACsC,EAAiB,sBAAMtC,OACjC,SAAC,EAAsC,GAApC,IAAQwC,EAAU,SAAKC,EAAS,mBAAlC,YAAgDC,EAAU,SAAKC,EAAS,mBAAlC,YAAyC,OAC5E,IAAaH,EAAYE,IAAe,IAAaD,EAAWE,MAIlEC,EAAqB,kBAAyBL,GAIpD,OAFAK,EAAmBC,YAAc,kBAAiBP,EAAkBO,aAAeP,EAAkBvB,MAAI,IAElG6B,I,+JCkDI,kBAnD8C,SAAC,G,QAC1D,IAAAE,qBAAa,IAAG,wBAAqB,EACrCxC,EAAQ,WACR,IAAAC,iBAAS,IAAG,mBAAgB,EAC5B,IAAAwC,yBAAiB,IAAG,6BAA0B,EAC9C,IAAAC,uBAAe,IAAG,0BAAuB,EACzC,IAAAC,+BAAuB,IAAG,oCAAiC,EAC3DC,EAAa,gBACbC,EAAM,SAEA,EAA+B,qBAAW1D,EAAA,GAAxCC,EAAQ,WACV0D,EAD0B,mBACMD,EAEhCE,EAAwB,uBAAY,SAACC,EAAMC,GAC7CD,EAAKE,iBAAiB,iBAAiB,SAAC,GAAQ,WAC7BF,GACXC,SAGT,IAEH,OACI,wBAAIhD,UAAY,IACZA,GAAS,KACP,EAACwC,GAAoBK,EAAU,KAGjC,yBAAK7C,UAAY,IACbyC,GAAe,KACb,EAACC,GAA0BG,EAAU,KAGrCF,EAAc,CAAEE,WAAU,EAAE1D,SAAQ,KAGxCY,GAAY,kBAAC,gBAAa,CACxBmD,eAAiBJ,EACjBK,WAAaZ,EACba,GAAKP,EACLQ,cAAY,EACZC,QAAU,GACVC,eAAa,GAEb,yBAAKvD,UAAYuC,GACXxC,Q,qCCpCP,EArBwD,SAAC,GACpE,IAAAP,EAAE,KACFqD,EAAU,aACV9C,EAAQ,WACLN,EAAK,mBAJ4D,gCAKlE,OACF,oCACI,kBAAC+D,EAAA,EAAK,sBACG/D,EAAK,CACVgE,QAAUZ,EACV7C,UAAU,oEACVR,GAAKA,EACLkE,KAAK,WAGT,kBAACC,EAAA,EAAK,CAACC,QAAUpE,GACXO,KC6DC,oBAnE8C,SAAC,GAC1D,IAAAL,EAAU,aACVS,EAAK,QACL0D,EAAO,UACP,IAAAC,cAAM,IAAG,sBAAU3D,GAAM,EACzB4D,EAAK,QACFC,EAAI,mBANmD,mDAQlD,GAAc,qBAAWC,EAAA,IAAqB,IAAE,KAAhDzD,OAAI,IAAG,KAAE,EAEX0D,EAAc,sBAAY,sBAAW,SAACrB,GAAwB,gBAAC,G,IAAEsB,EAAK,QAAmB,OAC3F,kBAAC,EAAkB,sBACVA,EAAK,CACVC,SAAW1E,EACXF,GAAKsE,EACLjB,WAAasB,EAAMhE,QAAUA,EAC7BA,MAAQA,IAEN4D,aAAiBM,SACfN,EAAMlB,GACNkB,OAER,CACAD,EACApE,EACAqE,EACA5D,IAGEmE,EAAe,sBAAY,sBAAW,SAACnF,GAAmC,gBAACoF,GACzEpE,IAAUoE,GACVpF,EAASgB,OAEb,IAEEqE,EAAsB,uBAAY,SAAC,G,IACrC3B,EAAU,aACV1D,EAAQ,WACoB,OAC5B,kBAACsF,EAAA,EAAc,CACXzE,UAAU,wBACVQ,KAAOA,EACPkE,SAAWJ,EAAanF,GACxBU,OAASqE,EAAYrB,OAE1B,CACCyB,EACA9D,EACA0D,IAGJ,OACI,kBAAC,EAAa,sBACLF,EAAI,CACTzB,cAAc,sBACdvC,UAAU,4DACVwC,kBAAkB,gFAClBC,gBAAgB,wBAChBC,wBAAwB,kCACxBC,cAAgB6B,EAChB5B,OAASzC,IAEP0D,O,wNC9Ed,YACI,WAAYvC,GAAZ,MACI,YAAM,CACFd,KAAM,uBACNmE,QAAS,OAAAC,EAAA,KAAqBjD,UAAU,gCACxCL,KAAI,KACN,K,OAEF,YAAe,EAAMuD,EAAkBC,W,EAE/C,OAV+C,yBAU/C,EAVA,CAA+CC,EAAA,G,oBCChC,SAASC,EAAoBC,GACxC,IACMC,EAAqB,OAAAC,EAAA,GAAsBF,GAEjD,OAAOC,GAHqB,CAAC,SAAU,aAGUE,QAAQF,EAAmBG,aAAe,EACvFH,EAAmBG,gBACnBhF,E,qHCmEFiF,EAAkB,OAAAC,EAAA,GAAa,qBAAoE,CACrGC,aAAc,SAACC,EAAQ,IACnBC,EAD2C,uBAC7BD,IAElBE,iBAAkB,SAAC,G,IAAE,IAAAC,mBAA8B,OAC/CC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,aAAc,GACdC,QAAS,GACTC,iBAPmC,IAAG,KAAE,EAQxCC,gBAAiB,GACjBC,oBAAqB,GACrBC,WAAY,GACZC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,mBAAmB,IAEvBC,iBAAkB,SAAC,G,IACfpF,EAAQ,WACRqF,EAAS,YAC+B,OACxC,cADwC,EACP,SAAAnB,GAAU,cAAAoB,EAAA,GAAqC,CAC5EtF,SAAQ,EACRuF,WAAYF,EAAUnB,GAAUA,EAAOU,oBA1Bd,EA5CyE,SAAC,G,IAC3GY,EAAgB,mBAChBH,EAAS,YACTI,EAAyB,4BACzBC,EAAS,YACTxB,EAAM,SACNlF,EAAa,gBACb2G,EAAS,YACTC,EAAc,iBACZ,OACF,kBAACC,EAAA,EAAI,CAACC,aAAa,MACf,kBAACC,EAAA,EAAc,CAACJ,UAAYA,GACxB,kBAACK,EAAA,EAAW,CACRN,UAAYA,EACZD,0BAA4BA,EAC5Bb,YAAcV,EAAOU,YACrBW,WAAaF,EAAUnB,EAAOU,aAC9BY,iBAAmBA,EACnBxG,cAAgBA,EAChBiH,uBAAwB,EACxBC,cAAe,IAEnB,yBAAKzH,UAAU,gBACX,uBACIA,UAAU,2CACV8B,KAAK,IACLN,QAAU,OAAAkG,EAAA,GAAeP,IAEzB,kBAACQ,EAAA,EAAgB,CAACnI,GAAG,0BAGzB,kBAACoI,EAAA,EAAM,CACHxD,SAAW8C,EACX1H,GAAG,wBACHkE,KAAK,SACLmE,QAAUD,EAAA,EAAcE,SAExB,kBAACH,EAAA,EAAgB,CAACnI,GAAG,wCA+D1B,EAzBoD,SAAC,GAChE,IAAAuI,EAAM,SACNC,EAAW,cACXb,EAAc,iBACXc,EAAgB,mBAJ6C,2CAK9D,OACF,kBAACC,EAAA,EAAK,CACFC,yBAAyB,gBACzBC,OACI,kBAACC,EAAA,EAAW,KACR,kBAACV,EAAA,EAAgB,CAACnI,GAAG,iCAG7BuI,OAASA,EACTC,YAAcA,EACdb,eAAiBA,EACjBmB,uBAAwB,GAExB,kBAAChD,EAAe,sBACP2C,EAAgB,CACrBd,eAAiBA,O,sBC7H7B,YACI,WAAY7F,GAAZ,MACI,YAAM,CACFd,KAAM,8BACNmE,QAAS,OAAAC,EAAA,KAAqBjD,UAAU,8CACxC4G,MAAO,OAAA3D,EAAA,KAAqBjD,UAAU,sDACtCL,KAAI,KACN,K,OAEF,YAAe,EAAMkH,EAA8B1D,W,EAE3D,OAX2D,yBAW3D,EAXA,CAA2DC,EAAA,G,ECA3D,YACI,WAAYzD,GAAZ,MACI,YAAM,CACFd,KAAM,qBACNmE,QAAS,OAAAC,EAAA,KAAqBjD,UAAU,8BACxCL,KAAI,KACN,K,OAEF,YAAe,EAAMmH,EAAsB3D,W,EAEnD,OAVmD,yBAUnD,EAVA,CAAmDC,EAAA,GCApC,SAAS2D,EACpBC,EACA/F,GAEA,OAAO,eAAK+F,GAAc,SAAAC,GAAe,0BAASA,EAAYC,YAAajG,MCDhE,SAASkG,EACpBC,EACAJ,GAEA,OAAO,iBACFI,GAAQA,EAAKC,UAAUC,eAAkB,IAC1C,SAACC,EAAQC,EAAMC,GAAM,OAChBD,EAAKE,kBAAoB,gBAAMF,EAAKG,UACjCJ,EAAOK,OAAM,MAAbL,EAOhB,SACIC,EACAR,EACAa,GAKA,IAHA,IAAIC,EAA8B,GAC5Bb,EAAcF,EAAgBC,EAAcQ,EAAK3J,IAE9C4J,EAAI,EAAGA,EAAID,EAAKO,SAAUN,IAC/BK,EAAaA,EAAWF,OAAO,yCACxBJ,GAAI,CACPQ,IAAQR,EAAKS,UAAS,IAAIT,EAAKU,UAAS,IAAIL,EAAa,IAAIJ,EAC7DR,YAAW,EACXc,SAAU,KAIlB,OAAOD,EAxBsBK,CAAUX,EAAMR,EAAcS,IAC/CF,IAER,I,qCC4DO,kBA/DsD,SAAC,G,IAClE,IAAAC,KACI3J,EAAE,KACFmK,EAAG,MACHI,EAAQ,WACRL,EAAQ,WACRlJ,EAAI,OACJwJ,EAAO,UACPpB,EAAW,cAEfqB,EAAS,YACTC,EAAe,kBACfC,EAAe,kBAETC,EAAsB,uBAAY,SAACC,GACrCF,EAAgBE,EAAS7K,EAAcmK,KACxC,CACCnK,EACA2K,EACAR,IAGEW,EAAsB,uBAAY,SAACD,GACrCH,EAAgBG,EAAS7K,EAAcmK,KACxC,CACCnK,EACAmK,EACAO,IAGJ,OAAO,yBAAKlK,UAAU,eAClB,4BAAQA,UAAU,8BACZ+J,GACE,yBAAKQ,IAAM/J,EAAOgK,IAAMT,KAGhC,yBAAK/J,UAAU,4BACX,wBAAIA,UAAU,oCACL0J,EAAQ,MAAMlJ,IAGpBwJ,GAAW,IAAIS,KAAI,SAAC,G,IAAQC,EAAU,OAAEvK,EAAK,QAAEwK,EAAM,SACpD,+BACI3K,UAAU,qDAAoD,YACpD,kCACV2J,IAAMgB,GAEN,wBAAI3K,UAAU,kBACL0K,EAAU,IAAKvK,OAKhC,kBAACyK,EAAA,EAAa,CACVX,UAAYA,EACZC,gBAAkBI,EAClBH,gBAAkBC,EAClBS,gBAAkBjC,GAAeA,EAAYkC,uB,0DCiE9C,aAAAC,EAAA,IAdR,SAA4BC,GASlC,MAAO,CACNC,OAHaC,EAFVF,EAAO,kCASG,EA5G8C,SAAC,G,IAC7DG,EAAY,eACZC,EAAa,gBACbC,EAAgB,mBAChBC,EAAa,gBACbC,EAAM,SACNC,EAAO,UACP/D,EAAY,eACZgE,EAAU,aAEJC,EAAkB,iBAAgC,MAClDC,EAAmB,iBAAgC,MAiBnDC,EAAY,mBACjB,WAAM,OACL,oCACC,2BAAOhI,QAAQ,OAAO5D,UAAU,2CAAyC,kBAGzE,uBAAGA,UAAU,0BAAwB,8CAKvC,IAGK6L,EAAe,mBACpB,WAAM,8BAAG7L,UAAU,6BAA2B,qCAC9C,IAGK8L,EAAc,uBACnB,SAAAtL,GAAQ,OACP,kBAACmD,EAAA,EAAK,CAACoI,QAAM,EAACnI,QAASpD,GACtB,kBAACmH,EAAA,EAAgB,CAACnI,GAAG,oCAGvB,IAGK0E,EAAc,uBACnB,SAAC,G,IAAEC,EAAK,QAAmB,OAC1B,kBAAC6H,EAAA,EAAS,sBACL7H,EAAK,CACTkD,aAAc,MACd4E,UAAW,IACXC,YAAa,wBACbC,IAAKR,OAGP,IAGKS,EAAS,mBACd,WAAM,OACL,kBAACC,EAAA,EAAM,KACN,kBAAC1E,EAAA,EAAgB,CAACnI,GAAG,oCAGvB,IAGD,OACC,oCACC,mBAnE0B,WAAM,OACjC,yBAAKQ,UAAU,iBACd,2BACCR,GAAG,OACHQ,UAAU,wEACV0D,KAAK,WACLyI,IAAKT,EACLjI,QAAS2H,EACTjL,MAAO,GAAGiL,EACV1G,SAAU,WAAM,OAAA2G,OAEhBO,KAwDmB,MACpB,kBAAC,IAAU,CAACT,aAAcA,EAAcG,cAAgBA,EAAgBC,OAAQA,EAAQC,QAASA,EAAS/D,aAAcA,EAAcgE,WAAYA,IAClJ,kBAACa,EAAA,EAAQ,CAACF,OAAQA,EAAQ3K,OAAO,8BAChC,kBAAC8K,EAAA,EAAS,CAACC,MAAOtI,EAAaH,MAAO+H,EAAatL,KAAK,iBACvDqL,O,4EChGCY,GAAyE,SAAC,G,IAC5EC,EAAa,gBACbC,EAAc,iBAERb,EAAc,uBAAY,WAAM,OAClC,yBAAK9L,UAAU,uBACX,kBAAC4M,GAAA,EAAoB,CAACC,8BAA+B,EAAOC,OAASH,OAE1E,CAACA,IAEJ,OAAO,kBAACI,GAAA,EAAa,CACjBjJ,OAAS,uBAAuB4I,EAAa,IAAIC,EAAenN,GAChEuE,MAAQ+H,EACR3L,MAAQwM,EAAenN,MAsEhB,mBAvDyD,SAAC,G,IACrEkN,EAAa,gBACbM,EAAS,YACT9F,EAAS,YACT,IAAA+F,uBAAe,IAAG,MAAW,EAC7BC,EAAwB,2BACxBC,EAAgB,mBAChBC,EAAmB,sBACnBC,EAAc,iBAER5M,EAAe,uBAAY,SAACN,GAC9BgN,EAAiBT,EAAevM,KACjC,CACCuM,EACAS,IAGJ,OAAKF,EAAgBpL,OAKjB,kBAACyF,EAAA,EAAc,CAACJ,UAAYA,GACxB,kBAACjD,GAAA,EAAS,aACI,SACVhE,sBAAwBiN,EACxB1M,KAAOwM,EACPrN,SAAWc,GAETwM,EAAgBxC,KAAI,SAAAkC,GAClB,IAAMW,EACF,kBAACb,GAAsB,CACnBC,cAAgBA,EAChB/C,IAAMgD,EAAenN,GACrBmN,eAAiBA,IAIzB,OAAIS,EACIT,EAAeY,YAAYnI,QAAQ,+BAAiC,EACjEkI,OACF,EAELD,EAC4B,2BAAxBV,EAAejJ,OAA2G,IAAtEiJ,EAAeY,YAAYnI,QAAQ,8BACpFkI,OACF,EAEFA,OA9BZ,QC7Cf,0E,OAoBI,EAAAE,iBAAmB,kE,yEACX1N,KAAKL,MAAM2N,sBACLpD,EAAUlJ,SAASI,cAAc,8BAGjB,KAAlBuM,OAFEA,EAAQzD,aAAO,EAAPA,EAAS0D,iBAAiB,8BAE/B,EAALD,EAAO5L,SAC4C,QAAnD,EAAAmI,aAAO,EAAPA,EAAS9I,cAAc,qCAA4B,SAAGyM,UAAUC,IAAI,YAE9B,QAAtC,EAAA5D,aAAO,EAAPA,EAAS9I,cAAc,wBAAe,SAAGyM,UAAUE,OAAO,YAC1D7D,WAAS2D,UAAUE,OAAO,cAG1BJ,WAAOK,SAAQ,SAAM1E,GAAC,uD,oEACZrF,EAA+C,QAA1C,EAAGqF,EAAElI,cAAc,+BAAuB,eAAE6M,cAC1ChK,EAAMqB,QAAQ,+BAAiC,IAClDoH,EAAQpD,EAAElI,cAAc,+BAE1BsL,EAAM/I,SAAU,EACVuK,EAAUxB,EAAMhN,GAChByO,EAAUD,EAAQ5M,MAAM,KAE3BtB,KAAKL,MAAMkJ,gBAAkB7I,KAAKL,MAAMkJ,aAAa,GAAGuF,wBAA2BpO,KAAKL,MAAMkJ,aAAa,GAAGuF,wBAA0BpO,KAAKL,MAAMkJ,aAAa,GAAGuF,uBAAuB1O,KAAOyO,EAAQ,KACxMnO,KAAKL,MAAM0O,qBAAqBF,EAAQ,GAAIA,EAAQ,K,aAMpEjE,WAAS2D,UAAUC,IAAI,c,WA8D3B,EAAAQ,6BAAmE,SAAO,G,IAAE9M,EAAI,O,mJAQpF,OAPM,EAA0CxB,KAAKL,MAA7C0O,EAAoB,uBAAE5N,EAAa,iBAErCqI,GAAetH,EAAK+M,mBAAqB,IAAIC,MAAK,SAAC,G,IACrDJ,EAAsB,yBACIjB,EAAe,2BACvC,OAACiB,GAA0BjB,OAEZrE,EAAY2F,0BAIzBA,EAAiC3F,EAAW,yBAAlBpJ,EAAOoJ,EAAW,GAC9C4F,EC1IC,SAAsCD,GACjD,GAAKA,EAIL,OAAOA,EAAyBD,MAAK,SAAC,GAA8C,OAA/B,mBDqIvBG,CAA6BF,GACjDG,EAA2D,IAApCH,EAAyB1M,QAAgB0M,EAAyB,IACzFI,EAAwBH,GAAqBE,GAMnD,GAAMP,EAAqB3O,EAAImP,EAAsBnP,KAHjD,KATA,I,cAYJ,SACAe,EAAc,qBAAqBf,EAAMmP,EAAsBnP,I,cA+BvE,OAnKkC,yBAG9B,YAAAoP,kBAAA,WACY,IAAAC,EAA4B/O,KAAKL,MAAK,wBAC9CK,KAAKgP,YAAcD,EAAwB/O,KAAKsO,8BAChDtO,KAAK0N,oBAGT,YAAAuB,qBAAA,WACQjP,KAAKgP,cACLhP,KAAKgP,cACLhP,KAAKgP,iBAAczO,IAI3B,YAAA2O,mBAAA,WACIlP,KAAK0N,oBAqCT,YAAA3N,OAAA,sBACU,EAUFC,KAAKL,MATLkJ,EAAY,eACZsG,EAAmB,sBACnBd,EAAoB,uBACpBjH,EAAS,YACTgI,EAAyB,4BACzBC,EAAsB,yBACtBC,EAAQ,WACRhC,EAAmB,sBACnBC,EAAc,iBAGlB,OAAK1E,GACAA,EAAa9G,QACbqN,EAeE,oCACFvG,EACI8B,KAAI,SAAA7B,GAAe,OACpB,yBAAK5I,UAAU,0CAA0C2J,IAAMf,EAAYpJ,IACjEyP,GAAuB,EAAKI,kBAAkBzG,GAEhD,kBAAC,GAAmB,CAChB8D,cAAgB9D,EAAYpJ,GAC5BwN,WAyEDN,EAzE+B9D,EAAYpJ,GA0E3D,qBAAqBkN,GAzEJxF,UAAYA,EAAU0B,EAAYpJ,IAClC2N,iBAAmBgB,EACnBjB,yBAA2BtE,EAAYsF,wBAA0BtF,EAAYsF,uBAAuB1O,GACpGyN,gBAAkBrE,EAAY2F,yBAC9BnB,oBAAsBA,EACtBC,eAAkBA,MAGlBzE,EAAY2F,2BAA6B3F,EAAY2F,yBAAyB1M,SAC9E,kBAACyF,EAAA,EAAc,CAACgI,wBAAsB,EAACpI,UAAYA,EAAU0B,EAAYpJ,KACnE,EAAK+P,wBAAwBJ,KA8D/D,IAA2BzC,MA7FX,kBAACpF,EAAA,EAAc,CAACJ,UAAYA,KACtBpH,KAAKyP,wBACH,kBAAC5H,EAAA,EAAgB,CACbnI,GAAK4P,GAAYH,EACb,wCACA,4CA0DpB,YAAAM,wBAAR,SAAgC5K,GAC5B,OACI,yBAAK3E,UAAU,mDACX,uBAAGA,UAAU,kEACP2E,KAMV,YAAA0K,kBAAR,SAA0BzG,GACd,IAAAG,EAASjJ,KAAKL,MAAK,KAE3B,OACI,yBAAKO,UAAU,qBACX,gCACI,kBAAC2H,EAAA,EAAgB,CAACnI,GAAG,uCAGzB,kBAACgQ,EAAA,EAAa,CAACnF,QAAUzB,EAAYkC,kBAErC,kBAAC2E,EAAA,EAAyB,CACtB1G,KAAOA,EACPH,YAAcA,MAKlC,EAnKA,CAAkC,iBA+KnB,4BAAgE,CAC3EpD,aAAc,OACdG,iBAAA,SAAiB,G,IAAEgD,EAAY,eACrB+G,EAA8C,GAQpD,OANC/G,GAAgB,IAAImF,SAAQ,SAAAlF,GACzB8G,EAAkB9G,EAAYpJ,IAAMoJ,EAAYsF,uBAC5CtF,EAAYsF,uBAAuB1O,GACnC,MAGD,CAAEkQ,kBAAiB,KAXnB,CAaZ,IEhLGC,GAAkC,0BACpC,SAAC,GAA8C,OAA7B,kBAA6CC,aAC/D,SAAAA,GAAa,gBAACC,GACV,OAAOD,EAAUC,GAAY,SAAC,GAAa,OAAP,OAAYxB,yBAIlDyB,GAAoB,0BACtB,SAACC,EAAsB,GAAgD,OAA7B,uBAC1C,SAAC,GAAoC,OAA1B,WAAmCC,4BAC9C,SAAC,GAAoC,OAA1B,WAAmCC,6BAC9C,SAAC,GAAoC,OAA1B,WAAmCC,yBAC9C,SAAC,GAAoC,OAA1B,WAAmCC,0BAC9C,SAACC,EAAmBJ,EAA0BC,EAA2BC,EAAuBC,GAC5F,OAAO,SAACzD,GACJ,OACI0D,GACAJ,KACAC,EAA0BvD,IAC1BwD,EAAsBxD,IACtByD,QAMVE,GAAmB,SAACtH,EAAYuH,GAClC,GAAIA,EAAqBzO,OAAS,EAC9B,OAAOyO,EAEX,IAAMC,EAAiBzH,EAAsBC,EAAMuH,GAC7CE,EAAoB,eAAK,cAAID,EAAgB,mBAEnD,OAAO,iBAAOD,GAAsB,SAAA1H,GAAe,OAAA4H,EAAkBpL,QAAQwD,EAAYpJ,QA6C9E,cAAAuL,EAAA,IA1CR,SACH,EACAtL,G,IADEgR,EAAe,kBAAEC,EAAa,gBAI5B,EAUAA,EAAa,KATTC,EAAO,UACPtC,EAAe,kBACfuC,EAAS,YACTC,EAAW,cACXC,EAAW,cAGXb,EAEJS,EAAa,mCAEXK,EAAWF,IACX9H,EAAO4H,IACPK,EAASJ,IACT3L,EAAW6L,IAEjB,KAAKE,GAAW/L,GAAa8L,GAAahI,GACtC,OAAO,KAGX,IAAMJ,EAAe0H,GAAiBtH,EAAMsF,KAAsB,IAC5De,EAAWpK,EAAoBC,GAGrC,MAAO,CACH8D,KAAI,EACJJ,aAAY,EACZwG,uBALmC6B,EAAOC,iBAAgB,2BAM1D/J,UAAW4I,GAAkBY,EAAejR,GAC5CwQ,0BAAyB,EACzBb,SAAQ,EACRjB,qBAAsBsC,EAAgBS,gCACtCrC,wBAAyBc,GAAgC,CAAEc,gBAAe,EAAEC,cAAa,OAIlF,CAAmC,ICQnC,GArFf,yB,+CAmFA,OAnFiC,yBAE7B,YAAA7Q,OAAA,WACU,MAkBFC,KAAKL,MAjBL0R,EAAY,eACZhG,EAAY,eACZiG,EAAc,iBACdnC,EAAmB,sBACnBoC,EAAuB,0BACvB,IAAAnC,iCAAyB,IAAG,GAAI,EAChCoC,EAAmB,sBACnBpK,EAAS,YACTkG,EAAmB,sBACnBC,EAAc,iBACdjC,EAAa,gBACbmG,EAAa,gBACb9F,EAAU,aACVJ,EAAgB,mBAChBC,EAAa,gBACb7D,EAAY,eACZ+J,EAAe,kBAGbC,EACF,kBAACnF,EAAA,EAAQ,CACL9M,GAAG,4BACH4M,OACI,oCACI,kBAACC,EAAA,EAAM,KACH,kBAAC1E,EAAA,EAAgB,CAACnI,GAAG,oCAGvB4R,GACE,kBAACM,EAAA,EAAK,CAAChO,KAAOgO,EAAA,EAAUC,OACpB,gCACI,kBAAChK,EAAA,EAAgB,CAACnI,GAAG,kCAKzCQ,UAAWoN,EAAsB,6CAA+C,iBAEhF,kBAACwE,GAAe,CACZ3C,oBAAsBA,EACtBmB,kBAAoBlJ,EACpBgI,0BAA4BA,EAC5B9B,oBAAsBA,EACtBC,eAAiBA,IAErB,uBAAG7N,GAAG,eAAeQ,UAAU,mCAAiC,sFAIxE,OAAO,qCACDyH,GAAgBgK,EAChBJ,GACE,kBAAC,EAAa,CACVlG,aAAcA,EACdC,cAAgBA,EAChBmG,cAAgBA,EAChB9F,WAAaA,EACbJ,iBAAmBA,EACnBC,cAAgBA,EAChBC,OAAO,GACPC,QAAQ,GACR/D,aAAeA,EACf+J,gBAAiBA,IAIzB,yBAAKxR,UAAU,gBACX,kBAAC4H,EAAA,EAAM,CACHxD,UAAY+M,KAAuB1J,IAAiBP,IAAoBoK,EACxE9R,GAAG,6BACH0H,UAAYA,EACZxD,KAAK,SACLmE,QAAUD,EAAA,EAAcE,SAExB,kBAACH,EAAA,EAAgB,CAACnI,GAAG,+BAKzC,EAnFA,CAAiC,iBCmCjC,0E,OAYI,EAAAJ,MAAgC,CAAEqO,MAAO,IAkHjC,EAAAoE,sBAAoC,WACxC,EAAKjS,SAAS,CAAEkS,gCAA4BzR,KAGxC,EAAA0R,kBAA0D,SAAM1H,GAAO,uD,kFAI3E,OAHQ2H,EAA0BlS,KAAKL,MAAK,uBACpCwS,EAAsBnS,KAAKV,MAAK,oBAMlC0L,EAAkB,OAAAoH,EAAA,GAAyB7H,GAEjD,GAAMvK,KAAKwK,oBAAoBQ,EAAiBmH,EAAkBrP,OAAQqP,EAAkBtI,OALxF,I,OAKJ,S,iBAGI,O,sBAAA,GAAMqI,EAAsBlH,I,cAA5B,S,+BAEAhL,KAAKF,SAAS,CAAEkS,2BAA4B,I,oBAGhDhS,KAAKF,SAAS,CACVqS,uBAAmB5R,I,YAInB,EAAA+J,oBAAmF,SAACC,EAASzH,EAAQuP,GACnG,MAAsD,EAAK1S,MAAzD0K,EAAe,kBAAgC,iCAQvD,EAAKvK,SAAS,CACVqS,kBAAmB,CACftI,IAAKwI,EACLvP,OAAM,KARVuH,EAAgBE,EAASzH,IAazB,EAAAwP,0BAAwC,WAC5C,EAAKxS,SAAS,CACVqS,uBAAmB5R,KAInB,EAAAiK,oBAA4F,SAAOD,EAASzH,EAAQuP,GAAO,uD,sFAO/H,GANM,EAIFrS,KAAKL,MAHL4S,EAAU,aACVC,EAAgB,mBAChB1L,EAAS,aAGR,OAAA2L,EAAA,GAAelI,EAASzD,EAAUyD,EAAQlE,cAC3C,MAAO,CAAP,EAAOmM,EAAiB,IAAI,I,iBAIX,O,sBAAA,GAAMD,EAAW,CAC9BvH,gBAAiBT,EACjBrB,UAAW,CAAC,CACRpG,OAAM,EACN8G,SAAU,O,cAJVpI,EAAS,SAMf,KAEFxB,KAAK0S,UAAUL,EAAS9H,EAAS/I,G,+BAEjCgR,EAAiB,IAAI,EAAsB,I,+BAI3C,EAAAhB,oBAAqC,WACnC,MAA4C,EAAK7R,MAA/CyH,EAAS,YAAEyB,EAAY,eAAEwI,EAAY,eAE7C,OAAOjK,IAAc,OAAAuL,EAAA,GAA2B9J,KAAkBwI,GAG9D,EAAAqB,UAII,SAAC7I,EAAKU,EAAS/I,GACf,IAAOoR,EAAiB,EAAKtT,MAAK,MACpCqO,EC3QC,SACXA,EACA,EACA,G,IADEkF,EAAgB,mBAAEtI,EAAO,UACzBtB,EAAI,OAAEJ,EAAY,eAEpB,KAAIgK,EAAmB,GAAKA,GAAoBlF,EAAM5L,SAAWkH,EAAjE,CAIA,IAAM6J,EAAc7J,EAAKC,UAAUC,cAAcwB,KAAI,SAAC,GAAW,OAAP,QAEpDoI,GAAsBlK,GAAgB,IAAI2F,MAAK,SAAA1F,GACjD,cAAAkK,EAAA,GAAelK,EAAYkC,gBAAiBT,MAG1C0I,EAiBV,SAAuB5J,EAAqBJ,EAAaH,GACrD,IAAKG,IAASH,EACV,OAGI,IAKFoK,EALoBjK,EAAKC,UAAS,cACAiK,QACpC,SAAC,G,IAAEpJ,EAAS,YAAED,EAAS,YAAO,OAAAC,IAAcV,EAAKU,WAAaD,IAAcT,EAAKS,aAGvCa,KAAI,SAAC,GAAW,OAAP,QAEvD,OAAO7B,EAAYC,YAAYyF,MAAK,SAAA9O,GAAM,OAAAwT,EAAoBE,SAAS1T,MA7BzD2T,CAAc1F,EAAMkF,GAAmB5J,EAAM8J,GAE3D,OAAOpF,EAAMhD,KAAI,SAACtB,EAAMC,GACpB,GAAI2J,IAAUH,EAAYM,SAAS/J,EAAK3J,KAAO4J,IAAMuJ,EAAkB,CACnE,IAAM/P,EAASmQ,UAAS5J,EAAK3J,GAE7B,OAAO,yCACA2J,GAAI,CACP3J,GAAIoD,EACJgG,YAAaF,EAAgBC,GAAgB,GAAI/F,KAGrD,OAAOuG,MDgPGiK,CACVV,EACA,CACIC,iBAAkBD,EAAaW,WAAU,SAAAlK,GAAQ,OAAAA,EAAKQ,MAAQA,KAC9DU,QAAO,GAEX,CACItB,KAAMzH,EAAKqP,UACXhI,aAAcrH,EAAK+M,oBAIvBZ,GACA,EAAK7N,SAAS,CAAE6N,MAAK,K,EAGjC,OAtOgC,yBACrB,EAAA6F,yBAAP,SACI,EACAlU,G,IADE2J,EAAI,OAAEJ,EAAY,eAGpB,OAAKvJ,GAAUA,EAAMqO,OAAS,OAAA8F,EAAA,GAAuBxK,KAAU3J,EAAMqO,MAAM5L,OAIpE,KAHI,CAAE4L,MAAO3E,EAAsBC,EAAMJ,KAQpD,YAAA9I,OAAA,sBACU,EA0BFC,KAAKL,MAzBL0R,EAAY,eACZhG,EAAY,eACZlB,EAAS,YACTtB,EAAY,eACZI,EAAI,OACJyK,EAAO,UACPC,EAAQ,WACRC,EAAe,kBACftC,EAAc,iBACdC,EAAuB,0BACvBnK,EAAS,YACTN,EAAS,YACThB,EAAkB,qBAClBqB,EAAS,YACTD,EAAyB,4BACzBD,EAAgB,mBAChBqG,EAAmB,sBACnBC,EAAc,iBACdjC,EAAa,gBACbmG,EAAa,gBACb9F,EAAU,aACVJ,EAAgB,mBAChBC,EAAa,gBACb7D,EAAY,eACZ+J,EAAe,kBAGb,EAA2D1R,KAAKV,MAA9DqO,EAAK,QAAEwE,EAAiB,oBAAEH,EAA0B,6BAE5D,OAAI0B,EAEI,yBAAKxT,UAAU,sBACX,kBAAC2H,EAAA,EAAgB,CAACnI,GAAG,uCACnB,IACF,mCAAa,wBAAwBsC,KAAK,IAAIN,QAAU,OAAAkG,EAAA,GAAe+L,IACnE,kBAAC9L,EAAA,EAAgB,CAACnI,GAAG,0CAEvB,IACF,kBAACmU,EAAA,EAAc,CACXnU,GAAG,sCACHgC,QAAUkS,KAOtB,kBAAC,WAAQ,KACL,kBAACE,EAAA,EAAU,CACPC,MAAQ/B,EACRnN,QACI,oCACI,kBAACgD,EAAA,EAAgB,CAACnI,GAAG,6CACnB,IACF,kBAACmI,EAAA,EAAgB,CAACnI,GAAG,mCAG7BsU,QAAUhU,KAAK+R,sBACfkC,qBAAsB,IAExB,kBAAC,EAAgB,CACf9M,UAAYA,EACZD,0BAA4BA,EAC5BpB,mBAAqBA,EACrBgB,UAAYA,EACZG,iBAAmBA,EACnBG,UAAYA,EACZa,SAAWkK,EACX9K,eAAiBrH,KAAKsS,0BACtB1M,cAAgB5F,KAAKiS,oBAGzB,kBAAC3K,EAAA,EAAI,KACD,wBAAIpH,UAAU,mBACRyN,EAAMhD,KAAI,SAAAtB,GAAQ,OAChB,wBAAIQ,IAAMR,EAAKQ,KACX,kBAAC,EAAiB,CACdM,UAAYA,EACZd,KAAOA,EACPe,gBAAkB,EAAKI,oBACvBH,gBAAkB,EAAKC,2BAMvC,kBAAC,GAAkB,CACf+G,aAAcA,EACdhG,aAAcA,EACdiG,eAAiBA,EACjBlK,UAAYA,EACZ+H,qBAAsB,EACtBqC,oBAAsBxR,KAAKwR,sBAC3BD,wBAA0BA,EAC1BnC,2BAA6B,OAAA8E,EAAA,GAAuBrL,EAAcI,EAAKC,WACvEoE,oBAAsBA,EACtBC,eAAiBA,EACjBjC,cAAgBA,EAChBmG,cAAgBA,EAChB9F,WAAaA,EACbJ,iBAAmBA,EACnBC,cAAgBA,EAChB7D,aAAeA,EACf+J,gBAAiBA,OA+GzC,EAtOA,CAAgC,iBA4OjB,UAAAjM,EAAA,GAAa,qBAAgF,CACxGC,aAAc,SAACC,EAAQ,IACnBwO,EADsC,kBAC7BxO,IAEbE,iBAAkB,SAAC,GAAwB,OACvCuO,aADgC,oBAGpCC,oBAAoB,GAPI,CAQzB,K,yCE7RY,mBAfyE,SAAC,G,IACrFzP,EAAQ,WAEF0P,EAAe,mBAAQ,WAAM,OAC/B,kBAACzM,EAAA,EAAgB,CAACnI,GAAG,yCACtB,IAEH,OAAO,kBAAC6U,GAAA,EAAiB,CACrB7U,GAAG,gBACH4U,aAAeA,EACf5T,KAAK,wBACLkE,SAAWA,O,oBC8DJ,GAlEf,uE,OA4DY,EAAA4P,uBAAoE,SAAA9T,GAAQ,gBAAAL,IAEhFoU,EAD0B,EAAK9U,MAAK,eACtBe,EAAML,K,EAE5B,OAhEoC,yBAC1B,YAAAyO,kBAAN,W,gJACU,EAIF9O,KAAKL,MAHL+U,EAAU,aACVpF,EAAQ,WACR,IAAAkD,wBAAgB,IAAG,SAAI,E,iBAIvB,O,sBAAA,GAAMkC,EAAW,CAAEpF,SAAQ,K,cAA3B,S,+BAEAkD,EAAiB,G,+BAInB,YAAAvD,qBAAN,W,gJACU,EAIFjP,KAAKL,MAHLgV,EAAY,eACZrF,EAAQ,WACR,IAAAkD,wBAAgB,IAAG,SAAI,E,iBAIvB,O,sBAAA,GAAMmC,EAAa,CAAErF,SAAQ,K,cAA7B,S,+BAEAkD,EAAiB,G,+BAIzB,YAAAzS,OAAA,sBACU,EAIFC,KAAKL,MAHLiV,EAAW,cACX5N,EAAU,aACVsI,EAAQ,WAGZ,OACI,oCACI,yBACIpP,UAAY,iCAAiCoP,EAC7C5P,GAAKkV,EACLC,UAAY,IAEhB,kBAACrI,EAAA,EAAQ,KAELxF,EAAWmM,QAAO,SAAC,GAAe,OAAP,YAAexI,KAAI,SAAAtG,GAAS,OACnD,kBAACyQ,GAAA,EAAgB,CACbzQ,MAAQA,EACRwF,IAASxF,EAAM3E,GAAE,IAAI2E,EAAM3D,KAC3BkE,SAAW,EAAK4P,uBAAuBnQ,EAAM3D,MAC7CqU,gBAAgB,+BAChBzQ,UAAW,UAavC,EAhEA,CAAoC,iB,sBCW9B0Q,GAAmB,kBAEzB,0E,OA0DY,EAAAvU,cAAiE,SAACwU,EAAWC,GAC3E,MAGF,EAAKvV,MAFKc,EAAa,uBAQrB0U,EAPQ,aAIThC,QAAO,SAAA9O,GAAS,OAAAA,EAAM+Q,UACtBzK,KAAI,SAAAtG,GAAS,OAAAA,EAAM3D,QAEmB0S,SAAS6B,GAChD,gBAAgBA,EAChBA,EAEJxU,EAAiBuU,GAAgB,IAAIG,EAAiBD,IAGlD,EAAA1Q,aAA2D,SAACyQ,EAAW5U,IAK3EoU,EAFI,EAAK9U,MAAK,eAEAsV,EAAW5U,IAGrB,EAAAgV,yBAAqF,SAAC,G,IAAEpN,EAAM,SAAEqN,EAAU,aACtGb,EAAkB,EAAK9U,MAAK,cAE/BsI,GACDwM,EAAc,WAAYa,I,EAGtC,OA1FkC,yBAC9B,YAAAvV,OAAA,WACU,MAiBFC,KAAKL,MAhBLwK,EAAS,YACAa,EAAe,UACxBuK,EAAe,kBACflL,EAAe,kBACf3C,EAAqB,wBACrBP,EAAS,YACTD,EAAyB,4BACzBF,EAAU,aACVI,EAAS,YACTH,EAAgB,mBAGSuO,EAAW,gCAGpC7N,EAAY,eAGV8N,EAAetL,GAAaA,EAAUpI,OAAS,EAC/C2T,EAA0B,OAAAC,GAAA,GAAuB3K,EAAiBb,EAAWnD,GAEnF,OACI,kBAACwF,EAAA,EAAQ,CAAC9M,GAAG,4BACNiI,GAAgB8N,GACf,kBAACjJ,EAAA,EAAQ,CAAC9M,GAAG,qBACT,kBAAC8H,EAAA,EAAc,CAACJ,UAAYA,GACxB,kBAAC0D,EAAA,EAAa,CACVX,UAAYA,EACZC,gBAAkBmL,EAClBlL,gBAAkBA,EAClBU,gBAAkB2K,EAA0B1K,OAAkBzK,OAK3EmV,GACC,kBAAClO,EAAA,EAAc,CAACJ,UAAYA,EAAYwO,2BAAyB,GAC7D,kBAACnO,EAAA,EAAW,CACRN,UAAYA,EACZD,0BAA4BA,EAC5Bb,YAAcmP,GAAeA,EAAYnP,YACzC4O,UAAYD,GACZhO,WAAaA,EACbC,iBAAmBA,EACnB4O,qBAAuB7V,KAAKqV,yBAC5BzQ,SAAW5E,KAAKwE,aAChB/D,cAAgBT,KAAKS,cACrBiH,sBAAwBA,EACxBC,aAAeA,OAuC3C,EA1FA,CAAkC,aA4FnB,UAAAnH,GAAA,GAAc,ICXd,I,QArFf,uE,OA+EY,EAAAgU,uBAAoE,SAAA9T,GAAQ,gBAAAL,IAEhFoU,EAD0B,EAAK9U,MAAK,eACtBe,EAAML,K,EAE5B,OAnFoC,yBAC1B,YAAAyO,kBAAN,W,gJACU,EAIF9O,KAAKL,MAHL+U,EAAU,aACVpF,EAAQ,WACR,IAAAkD,wBAAgB,IAAG,SAAI,E,iBAIvB,O,sBAAA,GAAMkC,EAAW,CAAEpF,SAAQ,K,cAA3B,S,+BAEAkD,EAAiB,G,+BAInB,YAAAvD,qBAAN,W,gJACU,EAIFjP,KAAKL,MAHLgV,EAAY,eACZrF,EAAQ,WACR,IAAAkD,wBAAgB,IAAG,SAAI,E,iBAIvB,O,sBAAA,GAAMmC,EAAa,CAAErF,SAAQ,K,cAA7B,S,+BAEAkD,EAAiB,G,+BAIzB,YAAAzS,OAAA,sBACU,EAKFC,KAAKL,MAJL4K,EAAO,UACPuL,EAAQ,WACR9O,EAAU,aACVI,EAAS,YAGP2O,EAAmB/O,EAAWmM,QAAO,SAAC,GAAe,OAAP,YAC9C6C,EAA6BD,EAAiBhU,OAAS,EAE7D,OACI,kBAACyF,EAAA,EAAc,CAACJ,UAAYA,GACxB,yBAAKlH,UAAU,aAAa+V,MAAQ,CAAEC,QAAS,IAC3C,yBAAKhW,UAAU,6BACX,kBAACwP,EAAA,EAAa,CACVnF,QAAUA,KAIlB,yBAAKrK,UAAU,gCACX,kBAAC4H,EAAA,EAAM,CACHpI,GAAKoW,EACLpU,QAAU,OAAAkG,EAAA,KACVuO,KAAOrO,EAAA,EAAWsO,KAClBzU,OAAO,mBACPoG,QAAUD,EAAA,EAAcuO,WAExB,kBAACxO,EAAA,EAAgB,CAACnI,GAAG,0BAK/BsW,GAA8B,kBAACxJ,EAAA,EAAQ,CAAC9M,GAAG,kBAErCqW,EAAiBpL,KAAI,SAAAtG,GAAS,OAC1B,kBAACyQ,GAAA,EAAgB,CACbzQ,MAAQA,EACRwF,IAASxF,EAAM3E,GAAE,IAAI2E,EAAM3D,KAC3BkE,SAAW,EAAK4P,uBAAuBnQ,EAAM3D,MAC7CqU,gBAAgB,+BAChBzQ,UAAW,UAa3C,EAnFA,CAAoC,kBCsHrB,mBA7GkD,SAAA3E,GAEzD,IAAA2P,EAoBA3P,EAAK,SAnBLqH,EAmBArH,EAAK,WAlBLwH,EAkBAxH,EAAK,UAjBLuH,EAiBAvH,EAAK,0BAhBLkJ,EAgBAlJ,EAAK,aAfLsH,EAeAtH,EAAK,iBAdL4V,EAcA5V,EAAK,gBAbL8U,EAaA9U,EAAK,cAZL0K,EAYA1K,EAAK,gBAXL+U,EAWA/U,EAAK,WAVLgV,EAUAhV,EAAK,aATLyH,EASAzH,EAAK,UARLqL,EAQArL,EAAK,gBAPL2W,EAOA3W,EAAK,4BANLwK,EAMAxK,EAAK,UALL+H,EAKA/H,EAAK,sBAJL,EAIAA,EAAK,iBAJL6S,OAAgB,IAAG,SAAI,EACvB+D,EAGA5W,EAAK,sBAFL2N,EAEA3N,EAAK,oBADLgI,EACAhI,EAAK,aAED6W,EAAiB,qBAAW,MAAY,aAE1CC,EAAqB,sBAAY,uBAAW,SAACC,GAA8C,gBAC5FxM,GAAwC,OAAAwK,EAAW,yCAC7CgC,GACAxM,QAEP,IAUJ,GAAIoF,EAAU,CACV,IACIpF,EAAqC,GAEzC,GAAiB,WAAboF,EAQA,OAPApF,EAAU,CACNyM,OAAQ,CACJC,UANQ,gBAORC,QAASrE,IAKb,kBAAC,GAAqB,CAClBoC,YAbQ,gBAcRD,aAAeA,EACf3N,WAAaA,EACb0N,WAAa+B,EAAmBvM,GAChCoF,SAAWA,EACXmF,cAAgBA,IAK5B,GAAiB,cAAbnF,GAA4BtE,EAAiB,CAS7C,OANAd,EAAU,CACN4M,UAAW,CACPC,oBAJoB,qBASxB,kBAAC,GAAqB,CAClBxM,QAAUS,EACV8K,SAXoB,mBAYpBnB,aAAeA,EACf3N,WAAaA,EACb0N,WAAa+B,EAAmBvM,GAChC9C,UAAYmP,EACZjH,SAAWA,EACXmF,cAAgBA,KAMhC,OACI,kBAAC,GAAmB,CAChBlK,QAAUS,EACVb,UAAYA,EACZtB,aAAeA,EACf1B,UAAYA,EACZD,0BAA4BA,EAC5BF,WAAaA,EACbC,iBAAmBA,EACnBG,UAAYA,EACZmO,gBAAkBA,EAClBd,cAnE8D,SAACQ,EAAW5U,GAC1EiW,GACAE,GAAa,GAGjB/B,EAAcQ,EAAW5U,IA+DrBgK,gBAAkBA,EAClB3C,sBAAwBA,EACxB4F,oBAAsBA,EACtB3F,aAAeA,OC1IdqP,GAA0B,CACnC,WACA,aACA,cACA,OACA,kBACA,uBC2DSC,GAA0B,KAEvC,eAWI,WAAYtX,GAAZ,MACI,YAAMA,IAAM,KAThB,EAAAL,MAAiC,CAC7B4X,oBAAoB,EACpBC,wBAAwB,EACxBb,6BAA6B,GA8HzB,EAAA9E,oBAAqC,WACnC,MAIF,EAAK7R,MAHLyH,EAAS,YACTyB,EAAY,eACZuO,EAAO,UAIPD,EACA,EAAK7X,MAAK,uBAEd,QAAK8X,IAMEhQ,GAAa+P,IAA2B,OAAAxE,EAAA,GAA2B9J,KAGtE,EAAAwO,kBAA4C,SAAM3W,GAAI,uD,gFAW1D,OATID,EACAT,KAAKL,MAAK,cAED,gBAATe,IACAD,EAAc,kCAAmC,IACjDA,EAAc,sCAAuC,KAIzD,GAAM,IAAI6W,SAAQ,SAAAC,GAAW,OAAAC,WAAWD,O,OAQxC,OARA,SAEME,EAAkBT,GAAwB5D,SAAS1S,GAEjD4V,EAAgCtW,KAAKV,MAAK,4BAE9BU,KAAKL,MAAK,SAM9BK,KAAK0X,0BAA0BD,IAAoBnB,G,KAH/C,YAsBA,EAAAqB,oBAEI,SAAMpN,GAAO,uD,wFACf,EAKFvK,KAAKL,MAJLiY,EAAa,gBACb,IAAApF,wBAAgB,IAAG,SAAI,EACvB7M,EAAM,SACNkS,EAAS,YAGb7X,KAAKF,SAAS,CAAEoX,oBAAoB,I,iBAGhC,O,uBAAA,GAAMU,EAAcrN,I,cAApB,SAEAsN,EAAU,yCACHlS,GAAM,CACTqF,gBAAiB,OAAA8M,GAAA,GACb9X,KAAK8G,UAAUyD,EAAQlE,aACvBkE,M,+BAIRiI,EAAiB,G,oBAEjBxS,KAAKF,SAAS,CAAEoX,oBAAoB,I,6BAIpC,EAAA7M,gBAA8B,kE,0FAC5B,EAKFrK,KAAKL,MAJLoY,EAAkB,qBAClB,IAAAvF,wBAAgB,IAAG,SAAI,EACvBqF,EAAS,YACTlS,EAAM,SAGV3F,KAAKF,SAAS,CAAEoX,oBAAoB,I,iBAGhB,O,uBAAA,GAAMa,K,cAAhBxN,EAAU,SAChBsN,EAAU,yCACHlS,GAAM,CACTqF,gBAAiB,OAAA8M,GAAA,GACb9X,KAAK8G,UAAUyD,GAAWA,EAAQlE,aAClCkE,M,+BAIRiI,EAAiB,G,oBAEjBxS,KAAKF,SAAS,CAAEoX,oBAAoB,I,6BAvOhC,IAAAU,EAAkB,EAAKjY,MAAK,c,OAEpC,EAAKqY,uBAAyB,oBAAS,SAAOzN,EAAkB0N,GAA+B,uD,sEAEvF,O,sBAAA,GAAML,EAAcrN,EAAS,CACzB2N,OAAQ,CACJC,QAAS,CACL,wCAAyCF,O,cAHrD,SAOIA,GACAjY,KAAKF,SAAS,CAAEwW,6BAA6B,I,oBAGjDtW,KAAKF,SAAS,CAAEqX,wBAAwB,I,8BAE7CF,I,EAiOX,OAhQiC,yBAkC7B,YAAAlX,OAAA,WACU,MA6BFC,KAAKL,MA5BL0R,EAAY,eACZhG,EAAY,eACZlB,EAAS,YACTmH,EAAc,iBACdlK,EAAS,YACToL,EAAgB,mBAChBlD,EAAQ,WACR5H,EAAqB,wBACrBP,EAAS,YACTD,EAAyB,4BACzBD,EAAgB,mBAChB+D,EAAe,kBACfnC,EAAY,eACZ0I,EAAuB,0BACvBmD,EAAU,aACV0C,EAAO,UACPzC,EAAY,eACeyD,EAAW,yBACtC7B,EAAqB,wBACrBjJ,EAAmB,sBACnBC,EAAc,iBACd5F,EAAY,eACZ2D,EAAa,gBACbmG,EAAa,gBACb9F,EAAU,aACVJ,EAAgB,mBAChBC,EAAa,gBACbkG,EAAe,kBAGb,EAIF1R,KAAKV,MAHL4X,EAAkB,qBAClBC,EAAsB,yBACtBb,EAA2B,8BAIzB+B,GADuB,CAAC,SAAU,aACsBC,MAAK,SAAAtL,GAAU,OAAAA,IAAWsC,KAIxF,OACI,kBAAChI,EAAA,EAAI,CAACC,aAAa,MACf,kBAACiF,EAAA,EAAQ,KACL,kBAAC,GAAe,CACZrC,UAAYA,EACZtB,aAAeA,EACf1B,UAAYA,EACZD,0BAA4BA,EAC5ByN,aAAeA,EACf3N,WAAahH,KAAK8G,UAAUsR,GAAeA,EAAY/R,aACvDY,iBAAmBA,EACnBqP,4BAA8BA,EAC9B5B,WAAaA,EACbtN,UAAY8P,EACZX,sBAAwBA,EACxBjH,SAAWA,EACXiG,gBAAkBvV,KAAK2X,oBACvBlD,cAAgBzU,KAAKqX,kBACrB7E,iBAAmBA,EACnBnI,gBAAkBrK,KAAKqK,gBACvBW,gBAAkBA,EAClBtD,sBAAwBA,EACxB4F,oBAAsBA,EACtB3F,aAAeA,KAGdA,GAAgB0Q,GAAmC,yBAAKnY,UAAU,aAC/D,kBAAC,GAA0B,QAKvC,kBAAC,GAAkB,CACfmR,aAAcA,EACdhG,aAAcA,EACdiG,eAAiBA,EACjBlK,UAAYA,GAAa+P,EACzBhI,qBAAsB,EACtBqC,oBAAsBxR,KAAKwR,sBAC3BD,wBAA0BA,EAC1BnC,0BAA4BgI,EAC5B9J,oBAAsBA,EACtBC,eAAiBA,EACjB5F,aAAeA,EACf2D,cAAgBA,EAChBmG,cAAgBA,EAChB9F,WAAaA,EACbJ,iBAAmBA,EACnBC,cAAgBA,EAChBkG,gBAAiBA,MAoDzB,YAAAgG,0BAAR,SAAkCO,GACxB,MAGFjY,KAAKL,MAFLqL,EAAe,kBACYoN,EAAW,yBAGpCG,EAAyBH,GAAe,OAAAhG,EAAA,GAAyBgG,GAElEG,IAA0B,OAAAvF,EAAA,GAAeuF,EAAwBvN,KAItEhL,KAAKF,SAAS,CAAEqX,wBAAwB,IACxCnX,KAAKgY,uBAAuBO,EAAwBN,KA0DhD,YAAAnR,UAAR,SAAkBT,GAKd,OAAOS,EAFH9G,KAAKL,MAAK,WAEG0G,IA7Pd,EAAAmS,YAAc,KA+PzB,EAhQA,CAAiC,iBAkQlB,UAAA/S,EAAA,GAAa,qBAAkF,CAC1GC,aAAc,SAACC,EAAQ,IACnBwO,EADsC,kBAC7BxO,IAEbE,iBAAkB,SAAC,G,IAAEiB,EAAS,YAAEkE,EAAe,kBAAiD,OAC5FyN,sBADoE,0BAEpErE,aAFqF,kBAGrFpJ,gBAAiB,OAAA8M,GAAA,GACbhR,EAAUkE,GAAmBA,EAAgB3E,aAC7C2E,KAGR0N,eAAgB,SAAC,G,IACb1N,EAAe,kBACflE,EAAS,YACTrF,EAAQ,WACN,QACAuJ,GAAmB,OAAAjE,EAAA,GAAqC,CACtDtF,SAAQ,EACRuF,WAAYF,EAAUkE,EAAgB3E,eACvCsS,YAAY3N,IAEnBnE,iBAAkB,SAAC,G,IACfpF,EAAQ,WACRqF,EAAS,YAEsC,OADvC,WAER,iBAAO,CACHkE,gBAAiB,gBAAiC,SAAA4N,GAC9C,cAAAC,GAAA,GAAoC,CAChChX,UAAW,YAAyBJ,GACpCuF,WAAYF,EAAU8R,GAAcA,EAAWvS,oBAI3D,iBAAO,CACH2E,gBAAiB,gBAAiC,SAAA4N,GAC9C,cAAA7R,EAAA,GAAqC,CACjCtF,SAAQ,EACRuF,WAAYF,EAAU8R,GAAcA,EAAWvS,qBAI/DgO,oBAAoB,GA3CI,CA4CzB,KC5TH,4B,+CAqHA,OArH2B,yBACvB,YAAAtU,OAAA,WACU,MA2CFC,KAAKL,MA1CL0R,EAAY,eACZhG,EAAY,eACZlB,EAAS,YACToI,EAAU,aACVtJ,EAAI,OACJqI,EAAc,iBACdY,EAAqB,wBACrBrJ,EAAY,eACZ1B,EAAS,YACTD,EAAyB,4BACzB0M,EAAe,kBACflC,EAAe,kBACfiD,EAAY,eACZoD,EAAkB,qBAClBjR,EAAS,YACTG,EAAgB,mBAChByN,EAAU,aACVoE,EAAuB,0BACvBpF,EAAO,UACPtM,EAAS,YACT+H,EAAmB,sBACnBG,EAAQ,WACRyJ,EAAqB,wBACrBpF,EAAQ,WACRqF,EAAsB,yBACtBxG,EAAgB,mBAChBnI,EAAe,kBACfW,EAAe,kBACfuG,EAAuB,0BACvB7J,EAAqB,wBACrBuR,EAA8B,iCAC9BC,EAAO,UACPtB,EAAa,gBACbrB,EAAqB,wBACrBjJ,EAAmB,sBACnBC,EAAc,iBACd5F,EAAY,eACZ2D,EAAa,gBACbmG,EAAa,gBACb9F,EAAU,aACVJ,EAAgB,mBAChBC,EAAa,gBAGjB,OAAO2D,EACH,kBAAC,GAAiB,CACdkC,aAAcA,EACdhG,aAAcA,EACdlB,UAAYA,EACZoI,WAAaA,EACbtJ,KAAOA,EACPqI,eAAiBA,EACjBzI,aAAeA,EACf1B,UAAYA,EACZD,0BAA4BA,EAC5BgL,sBAAwBA,EACxBR,gBAAkBA,EAClB5L,mBAAqBkF,aAAe,EAAfA,EAAiB3E,YACtCS,UAAYA,EACZG,iBAAmBA,EACnByM,QAAUA,EACVtM,UAAYA,EACZwM,gBAAkBA,EAClBD,SAAWA,EACXQ,SAAW4E,EACXvG,iBAAmBA,EACnBnI,gBAAkBA,EAClB4O,+BAAiCA,EACjC1H,wBAA0BA,EAC1BjE,oBAAsBA,EACtBC,eAAiBA,EACjB5F,aAAeA,EACf2D,cAAgBA,EAChBmG,cAAgBA,EAChB9F,WAAaA,EACbJ,iBAAmBA,EACnBC,cAAgBA,IAEpB,kBAAC,GAAkB,CACf6F,aAAcA,EACdhG,aAAcA,EACdlB,UAAYA,EACZmH,eAAiBA,EACjBzI,aAAeA,EACf1B,UAAYA,EACZD,0BAA4BA,EAC5BwK,gBAAkBA,EAClBiD,aAAeA,EACfoD,mBAAqBA,EACrBjR,UAAYA,EACZG,iBAAmBA,EACnByN,WAAaA,EACboE,wBAA0BA,EAC1B1R,UAAYA,EACZ+H,oBAAsBA,EACtBoH,sBAAwBA,EACxBjH,SAAWA,EACX6E,SAAW6E,EACXxG,iBAAmBA,EACnBxH,gBAAkBA,EAClBuG,wBAA0BA,EAC1B7J,sBAAwBA,EACxBwR,QAAUA,EACVtB,cAAgBA,EAChBtK,oBAAsBA,EACtBC,eAAiBA,EACjB5F,aAAgBA,EAChB2D,cAAgBA,EAChBmG,cAAgBA,EAChB9F,WAAaA,EACbJ,iBAAmBA,EACnBC,cAAgBA,KAGhC,EArHA,CAA2B,aAuHZ,UAAA/F,EAAA,GAAa,IChIb,mBA/BgD,SAAC,G,IAC5D0J,EAAmB,sBACnBuE,EAAO,UACPyF,EAAqB,wBACrBC,EAAuB,0BACrB,OACF,yBAAKlZ,UAAU,yBACX,kBAACqM,EAAA,EAAM,CAAC5K,OAAO,4BACX,kBAACkG,EAAA,EAAgB,CACbnI,GAAKyP,EACAuE,EACG,+CACA,yCACJ,uCAIV0F,GACE,mCACc,uBACVpX,KAAK,IACLN,QAAU,OAAAkG,EAAA,GAAeuR,IAEzB,kBAACtR,EAAA,EAAgB,CAACnI,GAAKyP,EACnB,0BACA,gCCwCpB,eACI,WAAYxP,GAAZ,MACI,YAAMA,IAAM,K,OAoGR,EAAA0Z,iBAA+B,WACnC,EAAKvZ,SAAS,CAAEuR,cAAc,KAG1B,EAAAiI,8BAA4C,kE,+FAC1C,EAMFtZ,KAAKL,MALLkJ,EAAY,eACZsG,EAAmB,sBACnB,IAAAoK,6BAAqB,IAAG,SAAI,EAC5B,IAAA/G,wBAAgB,IAAG,SAAI,EACvBgH,EAAqB,0BAGrBrK,GAAuBtG,EAAa9G,OAAS,GAA7C,YACA/B,KAAKF,SAAS,CAAE2Z,gBAAgB,I,iBAI5B,O,uBAAA,GAAMD,EAAsB3Q,EAAa,GAAGmC,kB,cAA5C,S,+BAEAwH,EAAiB,G,oBAEjBxS,KAAKF,SAAS,CAAE2Z,gBAAgB,I,kBAIxCF,I,YAGI,EAAAG,2BAAyE,SAAO,G,IACpFjB,EAAqB,wBACJkB,EAAa,kBAC9BvF,EAAY,e,uKAEN,EAaFpU,KAAKL,MAZL+R,EAAe,kBACfkI,EAAc,iBACdJ,EAAqB,wBACrBK,EAAoB,uBACpBC,EAAgB,mBAChBtH,EAAgB,mBAChBxH,EAAe,kBACf+O,EAAc,iBACdzK,EAAQ,WACRhE,EAAa,gBACbmG,EAAa,gBACb9F,EAAU,aAGR4M,EAAyBoB,GAAiB,OAAAvH,EAAA,GAAyBuH,GACnEK,EAA8C,GAC9CC,EAAmBja,KAAKia,iBAAiB3K,GAE1C,OAAA0D,EAAA,GAAeuF,EAAwBvN,IACxCgP,EAASE,KAAKV,EAAsBjB,GAA0B,KAG9DE,GACAF,IACC,OAAAvF,EAAA,GAAeuF,EAAwBwB,KACvCE,GAEDD,EAASE,KAAKL,EAAqBtB,IAGvC4B,QAAQC,IAAI,eAAgBhG,GAEtBiG,EAAwBjG,EAAakG,QAAQ,kBAAmB,IAGlE5I,KAFE6I,GAA0BjP,EAAgB,oBAAsB,KAAKmG,EAAgB,mBAAmB9F,EAAU,KAAO,IAAK0O,IAGhIL,EAASE,KAAKN,EAAe,CAAElI,gBAAiB6I,K,iBAIhD,O,sBAAA,GAAMjD,QAAQkD,IAAIR,I,cAAlB,SAEAF,EAAiBrB,G,+BAEjBjG,EAAiB,G,+BAIjB,EAAAyH,iBAAmD,SAAA3K,GAGvD,MAF6B,CAAC,aAEFgJ,MAAK,SAAAtL,GAAU,OAAAA,IAAWsC,MAGlD,EAAAhF,oBAAkE,SAAOC,EAASzH,GAAM,uD,kFACtF,EAAqC9C,KAAKL,MAAxC8a,EAAY,eAAEjI,EAAgB,mB,iBAGlC,O,sBAAA,GAAMiI,EAAa,CACfzP,gBAAiBT,EACjBrB,UAAW,CAAC,CACRU,SAAU,EACV9G,OAAM,O,cAJd,SAQA4X,SAAS1Y,KAAO,yD,+BAEhBwQ,EAAiB,IAAI,EAAkB,I,+BAIvC,EAAAmI,0BAAuE,SAAO,G,IAAEvG,EAAY,e,6IAC1F,EAKFpU,KAAKL,MAJL+R,EAAe,kBACfkI,EAAc,iBACdE,EAAgB,mBAChBtH,EAAgB,mB,8CAIZd,IAAoB0C,EAApB,MACA,GAAMwF,EAAe,CAAElI,gBAAiB0C,K,OAAxC,S,wBAGJ0F,GAAiB,G,+BAEjBtH,EAAiB,G,+BA5NrB,EAAKlT,MAAQ,CACTma,gBAAgB,EAChBpI,aAAwC,KAA1B,EAAK1R,MAAMgM,Y,EA6NrC,OAnOuB,yBAUb,YAAAmD,kBAAN,W,oJACU,EAKF9O,KAAKL,MAJLib,EAAyB,4BACzBC,EAAmB,sBACnB,IAAAC,eAAO,IAAG,SAAI,EACd,IAAAtI,wBAAgB,IAAG,SAAI,E,iBAIvB,O,uBAAA,GAAM8E,QAAQkD,IAAI,CACdI,IACAC,O,cAFJ,SAKAC,I,+BAEAtI,EAAiB,G,oBAEjBxS,KAAKF,SAAS,CAAE2Z,gBAAgB,I,6BAIxC,YAAA1Z,OAAA,WACI,IAAM,EAoBFC,KAAKL,MAnBLmZ,EAAuB,0BACvBpF,EAAO,UACP0F,EAAuB,0BACvBnI,EAAQ,WAERuI,GADY,eACS,yBACrBuB,EAAwB,2BACxBC,EAA0B,6BAC1B7L,EAAmB,sBAEnB7B,GADqB,wBACF,uBACnBC,EAAc,iBACd5F,EAAY,eACZ2D,EAAa,gBACbmG,EAAa,gBACb9F,EAAU,aACVJ,EAAgB,mBAChBC,EAAa,gBACVyP,EAAiB,mBAnBlB,+VAsBA,EAGFjb,KAAKV,MAFLma,EAAc,iBACdpI,EAAY,eAGhB,OACI,yBAAKnR,UAAU,iBACX,kBAAC,GAAc,CACXwT,QAAUA,EACVvE,oBAAsBA,EACtBgK,sBAAwBnZ,KAAKsZ,8BAC7BF,wBAA0BA,IAG9B,kBAAC5R,EAAA,EAAc,CACXJ,UAAYqS,EACZ7D,2BAAyB,GAEzB,kBAAC,GAAY,sBACJqF,EAAiB,CACtB9Q,UAAY8G,EAAS9G,UACrBwK,aAAeqG,EACftG,WAAaqG,EACbjC,wBAA4BA,EAC5BpF,QAAUA,EACVvE,oBAAsBA,EACtB4J,sBAAwB/Y,KAAK2a,0BAC7B3B,uBAAyBhZ,KAAK0Z,2BAC9BrP,gBAAkBrK,KAAKsK,oBACvB5C,uBAAyBgM,EACzBkE,cAAgB4B,EAChBnI,aAAcA,EACdhG,aAAcrL,KAAKqZ,iBACnB/L,oBAAsBA,EACtBC,eAAiBA,EACjB5F,aAAeA,EACf2D,cAAgBA,EAChBmG,cAAgBA,EAChB9F,WAAaA,EACbJ,iBAAmBA,EACnBC,cAAgBA,QAoIxC,EAnOA,CAAuB,aAqOjB0P,GAA6B,0BAC/B,SAAC,GAAqE,OAA/B,uCACvC,SAAC,GAAsD,OAA/B,qBAAoC3M,qBAC5D,SAAC4M,EAAmBtS,GAAiB,8E,sEACjC,OAAKA,GAAiBA,EAAa9G,OAIhB,GAAMuV,QAAQkD,IAAI3R,EAAa8B,KAAI,SAAC,G,IAAEjL,EAAE,KACvD,OAAAyb,EAAkBzb,QAJlB,I,OAOJ,MAAO,CAAP,EAJmB,SAEjB,QAEU0b,iCAIb,SAASC,GAAmB,G,IAC/B1K,EAAe,kBACfC,EAAa,gBAGT,EAsBAA,EAAa,KArBTC,EAAO,UACPG,EAAW,cACXF,EAAS,YACTC,EAAW,cACXxC,EAAe,kBACf6M,EAAkB,qBAClBE,EAAiB,oBACjBC,EAAwB,2BACxBC,EAAoB,uBAExB,EAWA5K,EAAa,SAVT2F,EAAqB,wBACrBpG,EAAyB,4BACzBD,EAAwB,2BACxBE,EAAqB,wBACrBC,EAAsB,yBACtBoL,EAAyB,4BACzBC,EAA0B,6BAC1BC,EAAwB,2BACxBC,EAAkB,qBAIpBzW,EAAW6L,IACXE,EAASJ,IACTjI,EAAe0F,KAAqB,GACpC0C,EAAWF,IACX9H,EAAO4H,IAEb,KAAK1L,GAAa+L,GAAWD,GAAahI,GACtC,OAAO,KAIP,MAMAiI,EAAM,iBALF2K,EAAmB,sBACnBC,EAAQ,WACRC,EAAuB,0BACvB9U,EAAgB,mBAIlBqI,EAAWpK,EAAoBC,GAC/B6W,EAAsB,OAAAvI,EAAA,GAAuBxK,GAC7C7B,EACF8I,KACAC,KACAC,KACAC,KACAsL,KACAC,KACAH,IAEErC,EACF2C,IACCzM,GACD0M,EAAsB,GACtBA,EAAsB,GAEpB9U,EAA4B,CAAC,KAAM,KAAM,KAAM,MAEjD4U,EAAS,0DACT5U,EAA0BgT,KAAK,MAGnC,IAAMlP,GAAmBoO,GAA2BvQ,EAAa9G,OAAS,OAAIxB,EAAY6a,IAE1F,MAAO,CACH7I,WAAY5B,EAAgBsL,qBAC5BlC,eAAgBuB,IAChBrS,KAAI,EACJJ,aAAY,EACZ1B,UAAWqU,KAA0B,IACrCtU,0BAAyB,EACzB+J,SAAQ,EACRS,gBAAiBvM,EAASuM,gBAC1BQ,sBAAuBvB,EAAgBuB,sBACvC8I,2BAA4BrK,EAAgBuL,qBAC5CnE,mBAAoBmD,GAA2B,CAAEvK,gBAAe,EAAEC,cAAa,IAC/E9J,UAAWyU,EACXtU,iBAAgB,EAChB8T,yBAA0BpK,EAAgB8F,mBAC1C/C,QAASzC,EAASyC,QAClB+F,eAAgBiC,KAAgCxL,IAChD9I,UAAS,EACTmP,sBAAuBA,IACvBqE,0BAA2BjK,EAAgBiK,0BAC3CC,oBAAqBlK,EAAgBkK,oBACrCvL,SAAQ,EACRtE,gBAAe,EACfoO,wBAAuB,EACvBH,+BAAgC6C,EAAS,uDACzCvK,wBAAyBsK,EACzB3C,QAASvI,EAAgBwL,gBACzB1B,aAAc9J,EAAgByL,uBAC9BvC,qBAAsBlJ,EAAgBkJ,qBACtCD,eAAgBjJ,EAAgBiJ,eAChCJ,sBAAuB7I,EAAgB6I,uBAIhC,iBAAAvO,EAAA,GAAaoQ,GAAb,CAAiC","file":"shipping-0b0d326c.js","sourcesContent":["import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\nimport AddressForm from './AddressForm';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={ isLoading }>\n            <AddressForm\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                countryCode={ values.countryCode }\n                formFields={ getFields(values.countryCode) }\n                googleMapsApiKey={ googleMapsApiKey }\n                setFieldValue={ setFieldValue }\n                shouldShowSaveAddress={ false }\n                isPickupOnly={ false }\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={ preventDefault(onRequestClose) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={ isLoading }\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n    handleSubmit: (values, { props: { onSaveAddress } }) => {\n        onSaveAddress(values);\n    },\n    mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n        firstName: '',\n        lastName: '',\n        address1: '',\n        address2: '',\n        customFields: {},\n        country: '',\n        countryCode: defaultCountryCode,\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        postalCode: '',\n        phone: '',\n        city: '',\n        company: '',\n        shouldSaveAddress: false,\n    }),\n    validationSchema: ({\n        language,\n        getFields,\n    }: AddressFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n})(SaveAddress));\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={ isOpen }\n        onAfterOpen={ onAfterOpen }\n        onRequestClose={ onRequestClose }\n        shouldShowCloseButton={ true }\n    >\n        <SaveAddressForm\n            { ...addressFormProps }\n            onRequestClose={ onRequestClose }\n        />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion && isNil(item.parentId) ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string, key);\n    }, [\n        id,\n        onUseNewAddress,\n        key,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { FieldProps } from 'formik';\nimport React, {  useCallback, useMemo, useRef, FunctionComponent } from 'react';\n\nimport { withCheckout } from '../checkout';\nimport { TranslatedString } from '../locale';\nimport {\n\tFieldset,\n\tFormField,\n\tLabel,\n\tLegend,\n\tTextInput,\n} from '../ui/form';\nimport DatePicker from '../_ob-custom/ob-DatePicker';\n\nexport interface OrderCommentsProps {\n\tonDatePicked: () => void;\n\thasGiftOption: boolean;\n\thasShipByDate: boolean;\n\tshipByDate: string;\n\ttoggleGiftOption: () => void;\n    setShipByDate(value: string): void;\n\torder?: {};\n\tisDate: string;\n\theading: string;\n\tisPickupOnly: boolean;\n\tcustomerMessage: string;\n}\n\nconst OrderComments: FunctionComponent<OrderCommentsProps> = ({\n\tonDatePicked,\n\thasGiftOption,\n\ttoggleGiftOption,\n\tsetShipByDate,\n\tisDate,\n\theading,\n\tisPickupOnly,\n\tshipByDate\n}) => {\n\tconst giftCheckboxRef = useRef<null | HTMLInputElement>(null);\n\tconst orderCommentsRef = useRef<null | HTMLInputElement>(null);\n\n\tconst GiftOptionComponent = () => (\n\t\t<div className='ob-giftOption'>\n\t\t\t<input\n\t\t\t\tid='gift'\n\t\t\t\tclassName='ob-giftOption__checkbox form-checkbox optimizedCheckout-form-checkbox'\n\t\t\t\ttype='checkbox'\n\t\t\t\tref={giftCheckboxRef}\n\t\t\t\tchecked={hasGiftOption}\n\t\t\t\tvalue={`${hasGiftOption}`}\n\t\t\t\tonChange={() => toggleGiftOption()}\n\t\t\t/>\n\t\t\t{giftLabel}\n\t\t</div>\n\t);\n\n\tconst giftLabel = useMemo(\n\t\t() => (\n\t\t\t<>\n\t\t\t\t<label htmlFor='gift' className='form-label optimizedCheckout-form-label'>\n\t\t\t\t\tThis is a gift\n\t\t\t\t</label>\n\t\t\t\t<p className='ob-giftOption__message'>\n\t\t\t\t\t(We Offer Complimentary Greeting Cards)\n\t\t\t\t</p>\n\t\t\t</>\n\t\t),\n\t\t[]\n\t);\n\n\tconst limitComment = useMemo(\n\t\t() => <p className='ob-orderComments__message'>(Limit 150 Characters, 3 Lines)</p>,\n\t\t[]\n\t);\n\n\tconst renderLabel = useCallback(\n\t\tname => (\n\t\t\t<Label hidden htmlFor={name}>\n\t\t\t\t<TranslatedString id='shipping.order_comment_label' />\n\t\t\t</Label>\n\t\t),\n\t\t[]\n\t);\n\n\tconst renderInput = useCallback(\n\t\t({ field }: FieldProps) => (\n\t\t\t<TextInput\n\t\t\t\t{...field}\n\t\t\t\tautoComplete={'off'}\n\t\t\t\tmaxLength={150}\n\t\t\t\tplaceholder={'Add your message here'}\n\t\t\t\tref={orderCommentsRef}\n\t\t\t/>\n\t\t),\n\t\t[]\n\t);\n\n\tconst legend = useMemo(\n\t\t() => (\n\t\t\t<Legend>\n\t\t\t\t<TranslatedString id='shipping.order_comment_label' />\n\t\t\t</Legend>\n\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<GiftOptionComponent />\n\t\t\t<DatePicker onDatePicked={onDatePicked} setShipByDate={ setShipByDate } isDate={isDate} heading={heading} isPickupOnly={isPickupOnly} shipByDate={shipByDate} />\n\t\t\t<Fieldset legend={legend} testId='checkout-shipping-comments'>\n\t\t\t\t<FormField input={renderInput} label={renderLabel} name='orderComment' />\n\t\t\t\t{limitComment}\n\t\t\t</Fieldset>\n\t\t</>\n\t);\n};\n\ninterface WithCheckoutOrderConfirmationProps {\n\torder?: {};\n}\n\nexport function mapToOrderComments(context: any): WithCheckoutOrderConfirmationProps | null {\n\tconst {\n\t\tcheckoutState: {\n\t\t\tdata: { getOrder },\n\t\t},\n\t} = context;\n\n\tconst order = getOrder();\n\n\treturn {\n\t\torder,\n\t};\n}\n\nexport default withCheckout(mapToOrderComments)(OrderComments);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\n// const messengerDeliveryText = 'Messenger Delivery Service (Within 11-20 Miles Radius) - We will inform you when your order is ready to be delivered';\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n    isMessengerDelivery: boolean;\n    isShippingOnly: boolean;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n    isMessengerDelivery,\n    isShippingOnly\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => {\n                    const listComponent = (\n                        <ShippingOptionListItem\n                            consignmentId={ consignmentId }\n                            key={ shippingOption.id }\n                            shippingOption={ shippingOption }\n                        />\n                    )\n\n                    if (isMessengerDelivery)\n                        if (shippingOption.description.indexOf('Messenger Delivery Service') > -1)\n                        return listComponent;\n                        else return;\n\n                    if (isShippingOnly)\n                        if (shippingOption.type !== \"shipping_pickupinstore\" && shippingOption.description.indexOf('Messenger Delivery Service') === -1)\n                        return listComponent;\n                        else return;\n                    \n                    return listComponent;\n                }) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n        this.checkForShipping()\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    componentDidUpdate() : void {\n        this.checkForShipping()\n    }\n\n    checkForShipping = async() => {\n        if (this.props.isMessengerDelivery) {\n            const options = document.querySelector('#checkout-shipping-options');\n            const items = options?.querySelectorAll('.form-checklist-item')\n\n            if (items?.length === 0) {\n                options?.querySelector('.shippingOptions-container')?.classList.add('tempHide')\n                //options?.querySelector('.loadingOverlay-container')?.classList.add('tempHide')\n                options?.querySelector('#messZipError')?.classList.remove('tempHide')\n                options?.classList.remove('tempHide')\n            }\n            else {\n                items?.forEach(async i => {\n                    const label = i.querySelector('.shippingOption-desc')?.textContent\n                    if (label && label.indexOf('Messenger Delivery Service') > -1) {\n                        const input = i.querySelector('.form-checklist-checkbox') as HTMLInputElement\n                        if (input) {\n                            input.checked = true\n                            const radioId = input.id\n                            const splitId = radioId.split('-')\n\n                            if(this.props.consignments && (!this.props.consignments[0].selectedShippingOption || (this.props.consignments[0].selectedShippingOption && this.props.consignments[0].selectedShippingOption.id !== splitId[2]) )) {\n                                this.props.selectShippingOption(splitId[1], splitId[2]);\n                            }\n\n                        }\n                    }\n                })\n                options?.classList.add('tempHide')\n            }\n\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n            isMessengerDelivery,\n            isShippingOnly,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            {consignments\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                            isMessengerDelivery={ isMessengerDelivery }\n                            isShippingOnly= { isShippingOnly }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n    isMessengerDelivery: boolean;\n    isShippingOnly: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, consignment => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() ||  []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    isDatePicked: boolean;\n    onDatePicked: () => void;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    isMessengerDelivery: boolean;\n    isShippingOnly: boolean;\n    hasGiftOption: boolean;\n    hasShipByDate: boolean;\n    shipByDate: string;\n    toggleGiftOption: () => void;\n    setShipByDate(value: string): void;\n    isPickupOnly: boolean;\n    customerMessage: string;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n\n    render(): ReactNode {\n        const {\n            isDatePicked,\n            onDatePicked,\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n            isMessengerDelivery,\n            isShippingOnly,\n            hasGiftOption,\n            hasShipByDate,\n            shipByDate,\n            toggleGiftOption,\n            setShipByDate,\n            isPickupOnly,\n            customerMessage\n        } = this.props; \n\n        const shippingMethodsComponent = (\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n                className={isMessengerDelivery ? 'form-fieldset isMessengerDelivery tempHide' : 'form-fieldset'}\n            > \n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                    isMessengerDelivery={ isMessengerDelivery }\n                    isShippingOnly={ isShippingOnly }\n                />\n                <p id='messZipError' className='ob-giftOption__message tempHide'>No messenger service options for zipcode entered. Please use a different zipcode.</p>\n            </Fieldset>\n        );\n\n        return <>\n            {!isPickupOnly && shippingMethodsComponent }\n            { shouldShowOrderComments &&\n                <OrderComments \n                    onDatePicked={onDatePicked}\n                    hasGiftOption={ hasGiftOption }\n                    hasShipByDate={ hasShipByDate }\n                    shipByDate={ shipByDate }\n                    toggleGiftOption={ toggleGiftOption }\n                    setShipByDate={ setShipByDate }\n                    isDate=''\n                    heading=''\n                    isPickupOnly={ isPickupOnly }\n                    customerMessage={customerMessage}\n                /> \n            }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ !isDatePicked ? true : (isPickupOnly && !isLoading ? false : shouldDisableSubmit ) }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, AddressRequestBody, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { Fragment, PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress, mapAddressFromFormValues, AddressFormModal, AddressFormValues } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    isDatePicked: boolean;\n    onDatePicked: () => void;\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    isMessengerDelivery: boolean;\n    isShippingOnly: boolean;\n    hasGiftOption: boolean;\n    hasShipByDate: boolean;\n    shipByDate: string;\n    toggleGiftOption: () => void;\n    setShipByDate(value: string): void;\n    isPickupOnly: boolean;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            isDatePicked,\n            onDatePicked,\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isMessengerDelivery,\n            isShippingOnly,\n            hasGiftOption,\n            hasShipByDate,\n            shipByDate,\n            toggleGiftOption,\n            setShipByDate,\n            isPickupOnly,\n            customerMessage\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={ onCreateAccount }\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Fragment>\n                <ErrorModal\n                    error={ createCustomerAddressError }\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />\n                            { ' ' }\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={ this.handleCloseErrorModal }\n                    shouldShowErrorCode={ false }\n                />\n                { <AddressFormModal\n                    countries={ countries }\n                    countriesWithAutocomplete={ countriesWithAutocomplete }\n                    defaultCountryCode={ defaultCountryCode }\n                    getFields={ getFields }\n                    googleMapsApiKey={ googleMapsApiKey }\n                    isLoading={ isLoading }\n                    isOpen={ !!itemAddingAddress }\n                    onRequestClose={ this.handleCloseAddAddressForm }\n                    onSaveAddress={ this.handleSaveAddress }\n                /> }\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        { items.map(item => (\n                            <li key={ item.key }>\n                                <ItemAddressSelect\n                                    addresses={ addresses }\n                                    item={ item }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                />\n                            </li>\n                        )) }\n                    </ul>\n\n                    <ShippingFormFooter\n                        isDatePicked={isDatePicked}\n                        onDatePicked={onDatePicked}\n                        cartHasChanged={ cartHasChanged }\n                        isLoading={ isLoading }\n                        isMultiShippingMode={ true }\n                        shouldDisableSubmit={ this.shouldDisableSubmit() }\n                        shouldShowOrderComments={ shouldShowOrderComments }\n                        shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                        isMessengerDelivery={ isMessengerDelivery }\n                        isShippingOnly={ isShippingOnly }\n                        hasGiftOption={ hasGiftOption }\n                        hasShipByDate={ hasShipByDate }\n                        shipByDate={ shipByDate }\n                        toggleGiftOption={ toggleGiftOption }\n                        setShipByDate={ setShipByDate }\n                        isPickupOnly={ isPickupOnly }\n                        customerMessage={customerMessage}\n                    />\n                </Form>\n            </Fragment>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async address => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(shippingAddress, itemAddingAddress.itemId, itemAddingAddress.key);\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (e) {\n            this.setState({ createCustomerAddressError: e });\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (address, itemId, itemKey) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isDatePicked } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments) || !isDatePicked;\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if (newId && !cartItemIds.includes(item.id) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        } else {\n            return item;\n        }\n    });\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <DynamicFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                            disabled={ false }\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n    isMessengerDelivery: boolean;\n    isPickupOnly: boolean;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n            isPickupOnly\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { !isPickupOnly && hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                            isPickupOnly={ isPickupOnly }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <DynamicFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                                disabled={ false }\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n    isMessengerDelivery: boolean;\n    isPickupOnly: boolean;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n        isMessengerDelivery,\n        isPickupOnly\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n            isMessengerDelivery={ isMessengerDelivery }\n            isPickupOnly={ isPickupOnly }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    isDatePicked: boolean;\n    onDatePicked: () => void;\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n    isMessengerDelivery: boolean;\n    isShippingOnly: boolean;\n    isPickupOnly: boolean;\n    hasGiftOption: boolean;\n    hasShipByDate: boolean;\n    shipByDate: string;\n    toggleGiftOption: () => void;\n    setShipByDate(value: string): void;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            isDatePicked,\n            onDatePicked,\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isMessengerDelivery,\n            isShippingOnly,\n            isPickupOnly,\n            hasGiftOption,\n            hasShipByDate,\n            shipByDate,\n            toggleGiftOption,\n            setShipByDate,\n            customerMessage\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        //console.log('[SingleShippingForm.tsx]', this.props);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                        isMessengerDelivery={ isMessengerDelivery }\n                        isPickupOnly={ isPickupOnly }\n                    />\n                    {\n                        !isPickupOnly && shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    }\n                </Fieldset>\n\n                <ShippingFormFooter\n                    isDatePicked={isDatePicked}\n                    onDatePicked={onDatePicked}\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                    isMessengerDelivery={ isMessengerDelivery }\n                    isShippingOnly={ isShippingOnly }\n                    isPickupOnly={ isPickupOnly }\n                    hasGiftOption={ hasGiftOption }\n                    hasShipByDate={ hasShipByDate }\n                    shipByDate={ shipByDate }\n                    toggleGiftOption={ toggleGiftOption }\n                    setShipByDate={ setShipByDate }\n                    customerMessage={customerMessage}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        // console.log('Should disable?', isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments));\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress, isBillingSameAsShipping, customerMessage }) => ({\n        billingSameAsShipping: isBillingSameAsShipping,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getCustomFormFieldsValidationSchema({\n                    translate: getTranslateAddressError(language),\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, AddressRequestBody, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    isDatePicked: boolean;\n    onDatePicked: () => void;\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n    isMessengerDelivery: boolean;\n    isShippingOnly: boolean;\n    isPickupOnly: boolean;\n    hasGiftOption: boolean;\n    hasShipByDate: boolean;\n    shipByDate: string;\n    toggleGiftOption: () => void;\n    setShipByDate(value: string): void;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            isDatePicked,\n            onDatePicked,\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n            isMessengerDelivery,\n            isShippingOnly,\n            isPickupOnly,\n            hasGiftOption,\n            hasShipByDate,\n            shipByDate,\n            toggleGiftOption,\n            setShipByDate,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                isDatePicked={isDatePicked}\n                onDatePicked={onDatePicked}\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                createCustomerAddress={ createCustomerAddress }\n                customerMessage={ customerMessage }\n                defaultCountryCode={ shippingAddress?.countryCode }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                isMessengerDelivery={ isMessengerDelivery }\n                isShippingOnly={ isShippingOnly }\n                isPickupOnly={ isPickupOnly }\n                hasGiftOption={ hasGiftOption }\n                hasShipByDate={ hasShipByDate }\n                shipByDate={ shipByDate }\n                toggleGiftOption={ toggleGiftOption }\n                setShipByDate={ setShipByDate }\n            /> :\n            <SingleShippingForm\n                isDatePicked={isDatePicked}\n                onDatePicked={onDatePicked}\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isBillingSameAsShipping={ isBillingSameAsShipping }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n                isMessengerDelivery={ isMessengerDelivery}\n                isShippingOnly={ isShippingOnly }\n                isPickupOnly= { isPickupOnly }\n                hasGiftOption={ hasGiftOption }\n                hasShipByDate={ hasShipByDate }\n                shipByDate={ shipByDate }\n                toggleGiftOption={ toggleGiftOption }\n                setShipByDate={ setShipByDate }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, AddressRequestBody, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n\n    /****** */\n    isMessengerDelivery: boolean;\n    isShippingOnly: boolean;\n    isPickupOnly: boolean;\n    hasGiftOption: boolean;\n    hasShipByDate: boolean;\n    shipByDate: string;\n    toggleGiftOption: () => void;\n    setShipByDate(value: string): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isDatePicked: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isDatePicked: this.props.shipByDate !== \"\" ? true : false,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            isMessengerDelivery,\n            isShippingOnly,\n            isPickupOnly,\n            hasGiftOption,\n            hasShipByDate,\n            shipByDate,\n            toggleGiftOption,\n            setShipByDate,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isDatePicked,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isBillingSameAsShipping = { isBillingSameAsShipping }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest }\n                        updateAddress={ updateShippingAddress }\n                        isDatePicked={isDatePicked}\n                        onDatePicked={this.handleDatePicked}\n                        isMessengerDelivery={ isMessengerDelivery }\n                        isShippingOnly={ isShippingOnly }\n                        isPickupOnly={ isPickupOnly }\n                        hasGiftOption={ hasGiftOption }\n                        hasShipByDate={ hasShipByDate }\n                        shipByDate={ shipByDate }\n                        toggleGiftOption={ toggleGiftOption }\n                        setShipByDate={ setShipByDate }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleDatePicked: () => void = () => {\n        this.setState({ isDatePicked: true });\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n            hasGiftOption,\n            hasShipByDate,\n            shipByDate\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        console.log('orderComment', orderComment)\n\n        const parsedCustomerMessage = orderComment.replace(/(\\[[\\s\\S]+\\] +)/, '')\n        const orderCommentAddendum = `${hasGiftOption ? '[This is a Gift] ' : ''}${hasShipByDate ? `[Delivery Date: ${shipByDate}] ` : ''}${parsedCustomerMessage}`;\n\n        if (customerMessage !== orderCommentAddendum) {\n            promises.push(updateCheckout({ customerMessage: orderCommentAddendum }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout: features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}